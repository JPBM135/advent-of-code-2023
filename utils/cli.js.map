{"version":3,"sources":["cli.ts"],"sourcesContent":["import { spawnSync } from 'node:child_process';\nimport { mkdirSync, writeFileSync } from 'node:fs';\nimport { readdir } from 'node:fs/promises';\nimport process from 'node:process';\nimport { URL } from 'node:url';\nimport { createPromptModule } from 'inquirer';\n\nconst colors: Record<'toBlue' | 'toGreen' | 'toRed' | 'toYellow', (text: string) => string> = {\n  toRed: (text) => `\\u001B[31m${text}\\u001B[0m`,\n  toGreen: (text) => `\\u001B[32m${text}\\u001B[0m`,\n  toYellow: (text) => `\\u001B[33m${text}\\u001B[0m`,\n  toBlue: (text) => `\\u001B[34m${text}\\u001B[0m`,\n};\n\nconst daysPathUrl = new URL('../days/', import.meta.url);\nconst daysPath = daysPathUrl.pathname;\nconsole.log(daysPath);\n\nconst prompt = createPromptModule();\n\nconst questions = [\n  {\n    type: 'list',\n    name: 'type',\n    message: 'What do you want to do?',\n    choices: [\n      {\n        name: 'Build and run latest',\n        value: 'build-and-run-latest',\n      },\n      {\n        name: 'Build and run an specific day',\n        value: 'build-and-run-specific',\n      },\n      {\n        name: 'Add a new day',\n        value: 'new',\n      },\n      {\n        name: 'Watch and build an specific day',\n        value: 'build-all',\n      },\n      {\n        name: 'Exit',\n        value: 'exit',\n      },\n    ],\n  },\n];\n\nconst choice = await prompt(questions);\n\nif (choice.type === 'exit') {\n  process.exit(0);\n}\n\nif (choice.type === 'new') {\n  const alreadyCreatedDays = await readdir(daysPath);\n\n  const latestDay = alreadyCreatedDays.sort((a, b) => Number(b) - Number(a))[0] ?? null;\n\n  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n  const paddedNextDay = String(Number(latestDay || -1) + 1).padStart(2, '0');\n\n  console.log(`${colors.toBlue('[INFO]: Latest day:')} ${latestDay}`);\n  console.log(`${colors.toBlue('[INFO]: Next day:')} ${paddedNextDay}`);\n\n  mkdirSync(`${daysPath}${paddedNextDay}`);\n  writeFileSync(`${daysPath}${paddedNextDay}/index.ts`, `console.log('Welcome to day ${paddedNextDay}');`);\n\n  console.log(`${colors.toGreen('[SUCCESS]:')} Day ${paddedNextDay} created!`);\n  process.exit(0);\n}\n\nif (choice.type === 'build-and-run-specific' || choice.type === 'build-and-run-latest') {\n  const existingDays = await readdir(daysPath).then((folderFiles) => {\n    return folderFiles.filter((path) => !Number.isNaN(Number(path)));\n  });\n\n  const { day } = choice.type.endsWith('specific')\n    ? await prompt([\n        {\n          type: 'input',\n          name: 'day',\n          message: 'What day do you want to build?',\n          validate: (input) => {\n            const paddedDay = input.padStart(2, '0');\n            const dayExists = existingDays.includes(paddedDay);\n            return dayExists ? true : `Day ${paddedDay} doesn't exist`;\n          },\n        },\n      ])\n    : { day: existingDays.at(-1) };\n\n  const paddedDay = day.padStart(2, '0');\n\n  spawnSync('swc', [`${daysPath}/logger.ts`, '--out-dir', `${daysPath}/../dist`], {\n    stdio: 'inherit',\n  });\n\n  spawnSync('swc', [`${daysPath}${paddedDay}/index.ts`, '--out-dir', `${daysPath}/../dist`], {\n    stdio: 'inherit',\n  });\n\n  console.log(`${colors.toGreen('[SUCCESS]:')} Day ${paddedDay} built!`);\n  console.log(`${colors.toBlue('[INFO]:')} Running day ${paddedDay}...`);\n  console.log(`${colors.toBlue('[OUTPUT]:')} -------------------------------------`);\n\n  spawnSync('node', ['--enable-source-maps', `${daysPath}/../dist/${paddedDay}/index.js`], {\n    stdio: 'inherit',\n  });\n\n  console.log(`${colors.toBlue('[OUTPUT]:')} -------------------------------------`);\n  console.log(`${colors.toGreen('[SUCCESS]:')} Day ${paddedDay} run!`);\n\n  process.exit(0);\n}\n"],"names":["spawnSync","mkdirSync","writeFileSync","readdir","process","URL","createPromptModule","colors","toRed","text","toGreen","toYellow","toBlue","daysPathUrl","url","daysPath","pathname","console","log","prompt","questions","type","name","message","choices","value","choice","exit","alreadyCreatedDays","latestDay","sort","a","b","Number","paddedNextDay","String","padStart","existingDays","then","folderFiles","filter","path","isNaN","day","endsWith","validate","input","paddedDay","dayExists","includes","at","stdio"],"mappings":"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"}